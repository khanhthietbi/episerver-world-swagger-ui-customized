{
  "swagger": "2.0",
  "info": {
    "version": "2-17-0",
    "title": "EPiServer.ContentDeliveryApi"
  },
  "host": "localhost:65349",
  "schemes": [ "http" ],
  "paths": {
    "/api/episerver/v2.0/carts/{cartId}": {
      "get": {
        "tags": [ "CartApi" ],
        "summary": "Gets a cart.",
        "operationId": "CartApi_Get",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "The cart id.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/CartApiModel" }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      },
      "put": {
        "tags": [ "CartApi" ],
        "summary": "Updates an existing cart or creates new cart as per provided model.",
        "operationId": "CartApi_Put",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "The cart id.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "model",
            "in": "body",
            "description": "The cart model.",
            "required": true,
            "schema": { "$ref": "#/definitions/CartApiModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/CartApiModel" }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" }
        }
      },
      "delete": {
        "tags": [ "CartApi" ],
        "summary": "Deletes a cart as per given cartId",
        "operationId": "CartApi_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "The unique cart id.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": { "description": "NoContent" },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/episerver/v2.0/carts": {
      "post": {
        "tags": [ "CartApi" ],
        "summary": "Creates new cart as per provided model.",
        "operationId": "CartApi_Post",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The cart model.",
            "required": true,
            "schema": { "$ref": "#/definitions/CartApiModel" }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/CartApiModel" }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/episerver/v2.0/carts/{cartId}/converttoorder": {
      "post": {
        "tags": [ "CartApi" ],
        "summary": "Creates an order, returns an order model and location for the resource created in the header.",
        "operationId": "CartApi_ConvertToOrder",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "The cart id.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/OrderApiModel" }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v2.0/carts/{cartId}/preparecheckout": {
      "post": {
        "tags": [ "CartApi" ],
        "summary": "Validates cart and returns information related to cart totals, validation messages.",
        "operationId": "CartApi_PrepareCheckout",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "The cart id.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/CheckoutApiModel" }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/auth/token/": {
      "post": {
        "tags": [ "Authorization" ],
        "summary": "Get token by using refresh token.",
        "description": "Get new access token by using refresh token",
        "operationId": "Authorization_ByRefreshToken",
        "consumes": [ "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json" ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "object" },
            "examples": {
              "access_token": "KSNPBKtdWZkaCCybyzTrt6w3vKVW_psSU7IwB6AipdsH3Ed4Gj-tEP_cLMcg3-TNVSajzSZYNknV7ceC5E9ax3MEF-8G7tWm9gjKVUGM7imCnEzmuTjSGeo1l4t5ZXtS3A-PJRXHw6NxsigKhPnWxSDgkPWo6iFAjV2xs_6aKD5n6zT55Dhu_6R84VfY2WwNy9wyPW8wFroi2yZk5lcmNUNsLr_WPv9eYdLnBj4TxAeUGLJX6RGSbZGYjP_dnDA97ha-4QYskodJyXSTq9IwXyQtGZLo8N9jLDVgALocdSybAB1docAMXYjTanmrImLAIUKjcoA_PYX7F9P84FnuN9bH046jXUEf9J2fPo6NlGvtvrMpnhcCaCT00cRBvnFLhn99MSbEKVK1NNaM8QdTUC2xC5NRPAmR77kLVm5Qmsj15drmjth8Kqam8377ht9o4j3A7rY4L-5dRY6avX7MTDqI_ufGuZ-ikjZtdO6DGnispaSNKCYgQBNoXafLZKeOyZPiCD4IFMfD-01YdnqJgQ",
              "token_type": "bearer",
              "expires_in": 1199,
              "refresh_token": "fa7dc977c2674d6b99ca4f742ce956c8",
              "client_id": "Default",
              "username": "Your username",
              "issued": "Fri, 06 Jul 2018 10:30:50 GMT",
              "expires": "Fri, 06 Jul 2018 10:50:50 GMT"
            }
          }
        }
      },
      "parameters": [
        {
          "name": "Accept",
          "in": "header",
          "description": "Accept Header Value should be application/json",
          "required": false,
          "type": "string"
        },
        {
          "name": "Content-Type",
          "in": "header",
          "description": "Value should be application/x-www-form-urlencoded",
          "required": false,
          "type": "string"
        },
        {
          "name": "grant_type",
          "in": "body",
          "description": "Value should be refresh_token",
          "required": true,
          "type": "string"
        },
        {
          "name": "refresh_token",
          "in": "body",
          "description": "Your refresh token provided by Oauth",
          "required": true,
          "type": "string"
        },
        {
          "name": "client_id",
          "in": "body",
          "description": "Value should be Default",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/episerver/v2.0/content/{contentReference}": {
      "get": {
        "tags": [ "ContentApi" ],
        "summary": "Get content by given content reference and language",
        "operationId": "ContentApi_Get",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "contentReference",
            "in": "path",
            "description": "Content reference to retrieve data",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of properties needed to be expanded. The list is separated by comma",
            "required": false,
            "type": "string"
          },
          {
            "name": "select",
            "in": "query",
            "description": "List of properties needed to be returned. The list is separated by comma. Default are all properties returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Determines in which language the content should be retrieved. Example: 'en' or 'sv'",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "It should be in the format 'Bearer your_token', where 'your_token' is the token provided after authorization to access API. Note that there should be a space between 'Bearer' and 'your_token'.",
            "required": true,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/ContentApiModel" }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v2.0/content/{contentGuid}": {
      "get": {
        "tags": [ "ContentApi" ],
        "summary": "Get content by given content GUID and language",
        "operationId": "ContentApi_GetContent",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "contentGuid",
            "in": "path",
            "description": "ContentGuid of the content to retrieve data",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of properties needed to be expanded. The list is separated by comma",
            "required": false,
            "type": "string"
          },
          {
            "name": "select",
            "in": "query",
            "description": "List of properties needed to be returned. The list is separated by comma. Default are all properties returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Determines in which language the content should be retrieved. Example: 'en' or 'sv'",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "It should be in the format 'Bearer your_token', where 'your_token' is the token provided after authorization to access API. Note that there should be a space between 'Bearer' and 'your_token'.",
            "required": true,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/ContentApiModel" }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v2.0/content/{contentReference}/children": {
      "get": {
        "tags": [ "ContentApi" ],
        "summary": "Get the children of the content item with given language",
        "operationId": "ContentApi_GetChildren_ByContentReference",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "contentReference",
            "in": "path",
            "description": "Parent's content reference",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of properties needed to be expanded. The list is separated by comma",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The max number of children to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "x-epi-continuation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "select",
            "in": "query",
            "description": "List of properties needed to be returned. The list is separated by comma. Default are all properties returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Determines in which language the content should be retrieved. Example: 'en' or 'sv'",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "It should be in the format 'Bearer your_token', where 'your_token' is the token provided after authorization to access API. Note that there should be a space between 'Bearer' and 'your_token'.",
            "required": true,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ContentApiModel" }
            }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v2.0/content/{contentGuid}/children": {
      "get": {
        "tags": [ "ContentApi" ],
        "summary": "Preview API: Get the children of the content item with given language",
        "operationId": "ContentApi_GetChildren_ByContentGuid",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "contentGuid",
            "in": "path",
            "description": "Parent's guid based reference",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of properties needed to be expanded. The list is separated by comma",
            "required": false,
            "type": "string"
          },
          {
            "name": "select",
            "in": "query",
            "description": "List of properties needed to be returned. The list is separated by comma. Default are all properties returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "top",
            "in": "query",
            "description": "The max number of children to return. Default value is 100 and that is also maximum value",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "x-epi-continuation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Determines in which language the content should be retrieved. Example: 'en' or 'sv'",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "It should be in the format 'Bearer your_token', where 'your_token' is the token provided after authorization to access API. Note that there should be a space between 'Bearer' and 'your_token'.",
            "required": true,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/IContentApiModel" }
            }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v2.0/content/{contentReference}/ancestors": {
      "get": {
        "tags": [ "ContentApi" ],
        "summary": "Get the ancestors of the content item with given language",
        "operationId": "ContentApi_GetAncestors_ByContentReference",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "contentReference",
            "in": "path",
            "description": "Content reference to retrieve ancestor",
            "required": true,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of properties needed to be expanded. The list is separated by comma",
            "required": false,
            "type": "string"
          },
          {
            "name": "select",
            "in": "query",
            "description": "List of properties needed to be returned. The list is separated by comma. Default are all properties returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Determines in which language the content should be retrieved. Example: 'en' or 'sv'",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "It should be in the format 'Bearer your_token', where 'your_token' is the token provided after authorization to access API. Note that there should be a space between 'Bearer' and 'your_token'.",
            "required": true,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ContentApiModel" }
            }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v2.0/content/{contentGuid}/ancestors": {
      "get": {
        "tags": [ "ContentApi" ],
        "summary": "Get the ancestors of the content item with given language",
        "operationId": "ContentApi_GetAncestors_ByContentGuid",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "contentGuid",
            "in": "path",
            "description": "Content guid based reference to retrieve ancestor",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of properties needed to be expanded. The list is separated by comma",
            "required": false,
            "type": "string"
          },
          {
            "name": "select",
            "in": "query",
            "description": "List of properties needed to be returned. The list is separated by comma. Default are all properties returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Determines in which language the content should be retrieved. Example: 'en' or 'sv'",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "It should be in the format 'Bearer your_token', where 'your_token' is the token provided after authorization to access API. Note that there should be a space between 'Bearer' and 'your_token'.",
            "required": true,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ContentApiModel" }
            }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v2.0/content": {
      "get": {
        "tags": [ "ContentApi" ],
        "summary": "Get content by given content url or by list of GUID/Reference with given language",
        "description": "If {matchExact}\"/&gt; is set to false then it will route to the \"nearest\" content. Remaining segments are ignored. The url for the returned content can be\r\nused to determine if segments where ignored.\r\nOnly use contentUrl or guids/references for seperate request. Use contentUrl for get content by url and guids for get content by list of GUID/Reference.",
        "operationId": "ContentApi_QueryContent",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "contentUrl",
            "in": "query",
            "description": "The absolute url to the content",
            "required": false,
            "type": "string"
          },
          {
            "name": "guids",
            "in": "query",
            "description": "List of GUID seperated by ','",
            "required": false,
            "type": "string"
          },
          {
            "name": "references",
            "in": "query",
            "description": "List of ContentReference seperated by ','",
            "required": false,
            "type": "string"
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of properties needed to be expanded. The list is separated by comma",
            "required": false,
            "type": "string"
          },
          {
            "name": "select",
            "in": "query",
            "description": "List of properties needed to be returned. The list is separated by comma. Default are all properties returned",
            "required": false,
            "type": "string"
          },
          {
            "name": "matchExact",
            "in": "query",
            "description": "Specifies if the specified {contentUrl} should match url of the content exactly, that is no additional segments are allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Determines in which language the content should be retrieved. Example: 'en' or 'sv'",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "It should be in the format 'Bearer your_token', where 'your_token' is the token provided after authorization to access API. Note that there should be a space between 'Bearer' and 'your_token'.",
            "required": true,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ContentApiModel" }
            }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/auth/token": {
      "post": {
        "tags": [ "Authorization" ],
        "summary": "Get token by username and password.",
        "description": "Authorization",
        "operationId": "Authorization_GetTokenByUsernameAndPass",
        "consumes": [ "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json" ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "object" },
            "examples": {
              "access_token": "KSNPBKtdWZkaCCybyzTrt6w3vKVW_psSU7IwB6AipdsH3Ed4Gj-tEP_cLMcg3-TNVSajzSZYNknV7ceC5E9ax3MEF-8G7tWm9gjKVUGM7imCnEzmuTjSGeo1l4t5ZXtS3A-PJRXHw6NxsigKhPnWxSDgkPWo6iFAjV2xs_6aKD5n6zT55Dhu_6R84VfY2WwNy9wyPW8wFroi2yZk5lcmNUNsLr_WPv9eYdLnBj4TxAeUGLJX6RGSbZGYjP_dnDA97ha-4QYskodJyXSTq9IwXyQtGZLo8N9jLDVgALocdSybAB1docAMXYjTanmrImLAIUKjcoA_PYX7F9P84FnuN9bH046jXUEf9J2fPo6NlGvtvrMpnhcCaCT00cRBvnFLhn99MSbEKVK1NNaM8QdTUC2xC5NRPAmR77kLVm5Qmsj15drmjth8Kqam8377ht9o4j3A7rY4L-5dRY6avX7MTDqI_ufGuZ-ikjZtdO6DGnispaSNKCYgQBNoXafLZKeOyZPiCD4IFMfD-01YdnqJgQ",
              "token_type": "bearer",
              "expires_in": 1199,
              "refresh_token": "fa7dc977c2674d6b99ca4f742ce956c8",
              "client_id": "Default",
              "username": "Your username",
              "issued": "Fri, 06 Jul 2018 10:30:50 GMT",
              "expires": "Fri, 06 Jul 2018 10:50:50 GMT"
            }
          }
        }
      },
      "parameters": [
        {
          "name": "Accept",
          "in": "header",
          "description": "Accept Header Value should be application/json",
          "required": false,
          "type": "string"
        },
        {
          "name": "Content-Type",
          "in": "header",
          "description": "Value should be application/x-www-form-urlencoded",
          "required": false,
          "type": "string"
        },
        {
          "name": "grant_type",
          "in": "body",
          "description": "Value should be password",
          "required": true,
          "type": "string"
        },
        {
          "name": "username",
          "in": "body",
          "description": "Value should be the username in the system used for authentication and authorisation",
          "required": true,
          "type": "string"
        },
        {
          "name": "password",
          "in": "body",
          "description": "Value should be username's password",
          "required": true,
          "type": "string"
        },
        {
          "name": "client_id",
          "in": "body",
          "description": "Value should be Default",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/api/episerver/v2.0/search/content": {
      "get": {
        "tags": [ "ContentApiSearch" ],
        "summary": "Search contents based on criteria",
        "operationId": "ContentApiSearch_Search",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "languages",
            "in": "query",
            "required": true,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Specify a filter string to be applied to the search. Filter strings utilize OData v4 filter syntax",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Specify an orderby string to be applied to the search. Orderby strings utilize OData v4 sort syntax",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "query",
            "in": "query",
            "description": "Free text search to filter content. Supports query string syntax for searching in individual fields",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Specify number of items to skip in returned search results (used for pagination)",
            "required": false,
            "type": "integer",
            "default": ""
          },
          {
            "name": "top",
            "in": "query",
            "description": "Specify number of items to return in search results (used for pagination)",
            "required": false,
            "type": "integer",
            "default": ""
          },
          {
            "name": "personalize",
            "in": "query",
            "description": "Determines if returned content will be personalized (via the Visitor Group system) when returned. By default, content will be fetched in the context of an anonymous user.",
            "required": false,
            "type": "boolean",
            "default": ""
          },
          {
            "name": "expand",
            "in": "query",
            "description": "Comma-separated list of reference properties (Content References, Content Areas) which should have their content fetched in the response. Passing ' * ' will load content in all reference properties in the return.",
            "required": false,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "400": { "description": "Bad Request" }
        }
      }
    },
    "/api/episerver/v2.0/inventory": {
      "get": {
        "tags": [ "InventoryApi" ],
        "summary": "Gets sku inventory information.",
        "operationId": "InventoryApi_Get",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "contentId",
            "in": "query",
            "description": "The content id.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/InventoryApiModel" }
            }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v2.0/markets/{id}": {
      "get": {
        "tags": [ "MarketApi" ],
        "summary": "Gets a single market.",
        "operationId": "MarketApi_Get",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The market id.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/MarketApiModel" }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v2.0/markets": {
      "get": {
        "tags": [ "MarketApi" ],
        "summary": "Gets all markets.",
        "operationId": "MarketApi_GetAll",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/MarketApiModel" }
            }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v2.0/orders": {
      "post": {
        "tags": [ "OrderApi" ],
        "summary": "Creates new order as per provided model.",
        "operationId": "OrderApi_Post",
        "consumes": [ "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded" ],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "description": "The order model.",
            "required": true,
            "schema": { "$ref": "#/definitions/OrderInputModel" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/OrderApiModel" }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" }
        }
      }
    },
    "/api/episerver/v2.0/orders/{orderNumber}": {
      "get": {
        "tags": [ "OrderApi" ],
        "summary": "Gets a order.",
        "operationId": "OrderApi_Get",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "orderNumber",
            "in": "path",
            "description": "The order number.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/OrderApiModel" }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v2.0/pricing": {
      "get": {
        "tags": [ "PricingApi" ],
        "summary": "Gets sku price information.",
        "operationId": "PricingApi_GetPricings",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "contentIds",
            "in": "query",
            "description": "The content ids.",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "marketId",
            "in": "query",
            "description": "The market id.",
            "required": true,
            "type": "string"
          },
          {
            "name": "currencyCode",
            "in": "query",
            "description": "The currency code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/PricingApiModel" }
            }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v3/site": {
      "get": {
        "tags": [ "SiteDefinitionApi" ],
        "summary": "Get SiteDefinitionModel of current request",
        "operationId": "SiteDefinitionApi_Get_v3",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Determines in which language the content should be retrieved. Example: 'en' or 'sv'",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "It should be in the format 'Bearer your_token', where 'your_token' is the token provided after authorization to access API. Note that there should be a space between 'Bearer' and 'your_token'.",
            "required": true,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SiteDefinitionModel" }
            }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v2.0/site": {
      "get": {
        "tags": [ "SiteDefinitionApi" ],
        "summary": "Get SiteDefinitionModel of current request",
        "operationId": "SiteDefinitionApi_Get_v2.0",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Determines in which language the content should be retrieved. Example: 'en' or 'sv'",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "It should be in the format 'Bearer your_token', where 'your_token' is the token provided after authorization to access API. Note that there should be a space between 'Bearer' and 'your_token'.",
            "required": true,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/SiteDefinitionModel" }
            }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    },
    "/api/episerver/v3/site/{id}": {
      "get": {
        "tags": [ "SiteDefinitionApi" ],
        "operationId": "SiteDefinitionApi_GetById_v3",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Determines in which language the content should be retrieved. Example: 'en' or 'sv'",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "It should be in the format 'Bearer your_token', where 'your_token' is the token provided after authorization to access API. Note that there should be a space between 'Bearer' and 'your_token'.",
            "required": true,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SiteDefinitionModel" }
          }
        }
      }
    },
    "/api/episerver/v2.0/site/{id}": {
      "get": {
        "tags": [ "SiteDefinitionApi" ],
        "operationId": "SiteDefinitionApi_GetById_v2.0",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Determines in which language the content should be retrieved. Example: 'en' or 'sv'",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "It should be in the format 'Bearer your_token', where 'your_token' is the token provided after authorization to access API. Note that there should be a space between 'Bearer' and 'your_token'.",
            "required": true,
            "type": "string",
            "default": ""
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SiteDefinitionModel" }
          }
        }
      }
    },
    "/api/episerver/v2.0/warehouse/{warehouseCode}": {
      "get": {
        "tags": [ "WarehouseApi" ],
        "summary": "Gets warehouse by code.",
        "operationId": "WarehouseApi_Get",
        "consumes": [],
        "produces": [ "application/json", "text/json", "application/xml", "text/xml" ],
        "parameters": [
          {
            "name": "warehouseCode",
            "in": "path",
            "description": "The warehouse code.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": { "$ref": "#/definitions/WarehouseApiModel" }
          },
          "400": { "description": "Bad Request" },
          "403": { "description": "Forbidden" },
          "404": { "description": "Not Found" }
        }
      }
    }
  },
  "definitions": {
    "CartApiModel": {
      "description": "Represents a cart.",
      "required": [ "Name", "Market", "Currency" ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "description": "The cart id.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Name": {
          "description": "The cart name.",
          "type": "string"
        },
        "CustomerId": {
          "format": "uuid",
          "description": "The customer the cart belongs to.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Market": {
          "description": "The market in which the cart is valid.",
          "type": "string"
        },
        "Currency": {
          "description": "The currency of the market in which the cart is valid.",
          "type": "string"
        },
        "LastUpdated": {
          "format": "date-time",
          "description": "The last updated timestamp.",
          "type": "string"
        },
        "Shipments": {
          "description": "The shipments.",
          "type": "array",
          "items": { "$ref": "#/definitions/ShipmentModel" }
        },
        "CouponCodes": {
          "description": "The coupon codes.",
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "ShipmentModel": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "description": "The shipping id.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ShippingAddress": {
          "$ref": "#/definitions/AddressModel",
          "description": "The shipping address."
        },
        "ShippingMethodId": {
          "format": "uuid",
          "description": "The shipping method id.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "LineItems": {
          "description": "the line items that belong to the cart.",
          "type": "array",
          "items": { "$ref": "#/definitions/LineItemModel" }
        }
      }
    },
    "AddressModel": {
      "description": "Represents a customer address\r\ntodo: associate with commerce customers via business foundation?\r\ntodo: add more properties.",
      "type": "object",
      "properties": {
        "FirstName": {
          "description": "The first name.",
          "type": "string"
        },
        "LastName": {
          "description": "The last name.",
          "type": "string"
        },
        "Line1": {
          "description": "The line1.",
          "type": "string"
        },
        "Line2": {
          "description": "The line2.",
          "type": "string"
        },
        "City": {
          "description": "The city.",
          "type": "string"
        },
        "CountryName": {
          "description": "The country name.",
          "type": "string"
        },
        "PostalCode": {
          "description": "The postal code",
          "type": "string"
        },
        "RegionName": {
          "description": "The region name/state",
          "type": "string"
        },
        "Email": {
          "description": "The email.",
          "type": "string"
        },
        "PhoneNumber": {
          "description": "The phone number.",
          "type": "string"
        }
      }
    },
    "LineItemModel": {
      "description": "Represents a line item.",
      "required": [ "Quantity" ],
      "type": "object",
      "properties": {
        "Id": {
          "format": "uuid",
          "description": "The line item id.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ContentId": {
          "format": "uuid",
          "description": "The content id.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Code": {
          "description": "The sku code.",
          "type": "string"
        },
        "PlacedPrice": {
          "format": "decimal",
          "description": "The placed price.",
          "type": "number"
        },
        "Quantity": {
          "format": "decimal",
          "description": "The quantity.",
          "type": "number"
        },
        "DisplayName": {
          "description": "The display name.",
          "type": "string"
        },
        "IsGift": {
          "description": "Indicates whether the line item is a gift item.",
          "type": "boolean"
        }
      }
    },
    "OrderApiModel": {
      "description": "Represents a purchase order.",
      "type": "object",
      "properties": {
        "OrderNumber": {
          "description": "The order number.",
          "type": "string"
        },
        "CustomerId": {
          "format": "uuid",
          "description": "The customer the order belongs to.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Market": {
          "description": "The market in which the order was placed.",
          "type": "string"
        },
        "Currency": {
          "description": "The currency of the market in which the order was placed.",
          "type": "string"
        },
        "Shipments": {
          "description": "The shipments of the order.",
          "type": "array",
          "items": { "$ref": "#/definitions/ShipmentModel" }
        },
        "Totals": {
          "$ref": "#/definitions/TotalsModel",
          "description": "The totals of the order."
        }
      }
    },
    "TotalsModel": {
      "description": "Represents cart totals.",
      "type": "object",
      "properties": {
        "Total": {
          "format": "decimal",
          "description": "The total.",
          "type": "number"
        },
        "SubTotal": {
          "format": "decimal",
          "description": "The subtotal.",
          "type": "number"
        },
        "ShippingTotal": {
          "format": "decimal",
          "description": "The shipping total.",
          "type": "number"
        },
        "HandlingTotal": {
          "format": "decimal",
          "description": "The handling total.",
          "type": "number"
        },
        "TaxTotal": {
          "format": "decimal",
          "description": "The tax total.",
          "type": "number"
        },
        "DiscountTotal": {
          "format": "decimal",
          "description": "The order form discount total.",
          "type": "number"
        },
        "ShippingTotals": {
          "description": "The shipping totals.",
          "type": "array",
          "items": { "$ref": "#/definitions/ShippingTotalsModel" }
        }
      }
    },
    "ShippingTotalsModel": {
      "type": "object",
      "properties": {
        "ShipmentId": {
          "format": "uuid",
          "description": "The shipping id.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ShippingCost": {
          "format": "decimal",
          "description": "The shipping cost.",
          "type": "number"
        },
        "ShippingTax": {
          "format": "decimal",
          "description": "The shipping tax.",
          "type": "number"
        },
        "ItemsTotal": {
          "format": "decimal",
          "description": "The extended price total for the line items in the shipment.",
          "type": "number"
        },
        "LineItemPrices": {
          "description": "The line item prices.",
          "type": "array",
          "items": { "$ref": "#/definitions/LineItemPricesModel" }
        }
      }
    },
    "LineItemPricesModel": {
      "type": "object",
      "properties": {
        "LineItemId": {
          "format": "uuid",
          "description": "The line item id.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ExtendedPrice": {
          "format": "decimal",
          "description": "The extended price.",
          "type": "number"
        },
        "DiscountedPrice": {
          "format": "decimal",
          "description": "The discounted price.",
          "type": "number"
        }
      }
    },
    "CheckoutApiModel": {
      "description": "Represents the response data for cart operations.",
      "type": "object",
      "properties": {
        "Cart": {
          "$ref": "#/definitions/CartApiModel",
          "description": "The cart."
        },
        "Totals": {
          "$ref": "#/definitions/TotalsModel",
          "description": "The cart totals"
        },
        "AvailableShippingMethods": {
          "description": "The available shipping methods per shipment.",
          "type": "array",
          "items": { "$ref": "#/definitions/ShippingMethodModel" }
        },
        "ValidationIssues": {
          "description": "The validation issues per line item.",
          "type": "array",
          "items": { "$ref": "#/definitions/LineItemValidationModel" }
        }
      }
    },
    "ShippingMethodModel": {
      "description": "Represents a shipping method.",
      "type": "object",
      "properties": {
        "ShipmentId": {
          "format": "uuid",
          "description": "The shipping id.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Id": {
          "format": "uuid",
          "description": "The id.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "DisplayName": {
          "description": "The display name.",
          "type": "string"
        },
        "Price": {
          "format": "decimal",
          "description": "The price.",
          "type": "number"
        }
      }
    },
    "LineItemValidationModel": {
      "type": "object",
      "properties": {
        "ValidationIssues": {
          "type": "array",
          "items": { "type": "string" }
        },
        "ContentId": {
          "format": "uuid",
          "description": "The content id.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Code": {
          "description": "The sku code.",
          "type": "string"
        }
      }
    },
    "ContentApiModel": {
      "type": "object",
      "properties": {
        "ContentLink": { "$ref": "#/definitions/ContentModelReference" },
        "Name": { "type": "string" },
        "Language": { "$ref": "#/definitions/LanguageModel" },
        "ExistingLanguages": {
          "type": "array",
          "items": { "$ref": "#/definitions/LanguageModel" }
        },
        "MasterLanguage": { "$ref": "#/definitions/LanguageModel" },
        "ContentType": {
          "type": "array",
          "items": { "type": "string" }
        },
        "ParentLink": { "$ref": "#/definitions/ContentModelReference" },
        "RouteSegment": { "type": "string" },
        "Url": { "type": "string" },
        "Changed": {
          "format": "date-time",
          "type": "string"
        },
        "Created": {
          "format": "date-time",
          "type": "string"
        },
        "StartPublish": {
          "format": "date-time",
          "type": "string"
        },
        "StopPublish": {
          "format": "date-time",
          "type": "string"
        },
        "Saved": {
          "format": "date-time",
          "type": "string"
        },
        "Status": { "type": "string" }
      }
    },
    "ContentModelReference": {
      "type": "object",
      "properties": {
        "Id": {
          "format": "int32",
          "type": "integer"
        },
        "WorkId": {
          "format": "int32",
          "type": "integer"
        },
        "GuidValue": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "ProviderName": { "type": "string" },
        "Url": { "type": "string" },
        "Language": { "$ref": "#/definitions/LanguageModel" },
        "Expanded": { "$ref": "#/definitions/ContentApiModel" }
      }
    },
    "LanguageModel": {
      "type": "object",
      "properties": {
        "DisplayName": { "type": "string" },
        "Name": { "type": "string" }
      }
    },
    "IContentApiModel": {
      "type": "object",
      "properties": {
        "ContentLink": {
          "$ref": "#/definitions/ContentModelReference",
          "readOnly": true
        },
        "Language": {
          "$ref": "#/definitions/LanguageModel",
          "readOnly": true
        },
        "Name": {
          "type": "string",
          "readOnly": true
        },
        "Properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "epi-remove": true
          },
          "readOnly": true,
          "epi-remove": true
        }
      }
    },
    "SearchRequest": {
      "description": "Represents a search request made to the Content Api",
      "type": "object",
      "properties": {
        "Query": {
          "description": "Optional Free text query string for a search request",
          "type": "string"
        },
        "Skip": {
          "format": "int32",
          "description": "Number of results to bypass in the response. For use with paginated results.",
          "type": "integer"
        },
        "Top": {
          "format": "int32",
          "description": "Number of results to retrieve in the response. For use with paginated results.",
          "type": "integer"
        },
        "Personalize": {
          "description": "Indicates whether the response should be personalized when sent back to the user",
          "type": "boolean"
        },
        "Filter": {
          "description": "Filter string based on OData syntax for filtering content",
          "type": "string"
        },
        "OrderBy": {
          "description": "Order By string for ordering returned search results",
          "type": "string"
        },
        "Expand": {
          "description": "Comma-separated list of properties to Expand, fetching content in the response",
          "type": "string"
        }
      }
    },
    "SearchResponse": {
      "description": "Represents a search response sent back from the Content Api",
      "type": "object",
      "properties": {
        "TotalMatching": {
          "format": "int32",
          "description": "Total number of matching results from the search request.  For use in calculating pagination on the client, this number may be bigger than the returned total of {EPiServer.ContentApi.Search.Internal.SearchResponse.Results}\r\nin a single request based on the provider {EPiServer.ContentApi.Search.Internal.SearchRequest.Top} value, as well as the {EPiServer.ContentApi.Search.ContentSearchApiOptions.MaximumSearchResults} configuration value.",
          "type": "integer"
        },
        "Results": {
          "description": "Search Results in the form of {EPiServer.ContentApi.Core.Serialization.Models.ContentApiModel} instances",
          "type": "array",
          "items": { "$ref": "#/definitions/ContentApiModel" }
        }
      }
    },
    "InventoryApiModel": {
      "description": "Represents inventory information for a single catalog entry at a single warehouse.",
      "type": "object",
      "properties": {
        "EntryCode": {
          "description": "The catalog entry code.",
          "type": "string"
        },
        "WarehouseCode": {
          "description": "The warehouse's information.",
          "type": "string"
        },
        "PurchaseAvailableQuantity": {
          "format": "decimal",
          "description": "The quantity of items available for purchase.",
          "type": "number"
        },
        "PurchaseRequestedQuantity": {
          "format": "decimal",
          "description": "The quantity of items requested for purchase and not yet completed.",
          "type": "number"
        },
        "PurchaseAvailable": {
          "format": "date-time",
          "description": "The purchase availability date for the item and warehouse, in UTC.",
          "type": "string"
        }
      }
    },
    "MarketApiModel": {
      "description": "Represents market information.",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The id.",
          "type": "string"
        },
        "Name": {
          "description": "The name.",
          "type": "string"
        },
        "DefaultLanguage": {
          "description": "The default language.",
          "type": "string"
        },
        "DefaultCurrency": {
          "description": "The default currency.",
          "type": "string"
        },
        "Languages": {
          "description": "The languages.",
          "type": "array",
          "items": { "type": "string" }
        },
        "Currencies": {
          "description": "The currencies.",
          "type": "array",
          "items": { "type": "string" }
        },
        "Countries": {
          "description": "The countries.",
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "OrderInputModel": {
      "description": "Represents a cart.",
      "required": [ "Name", "Market", "Currency" ],
      "type": "object",
      "properties": {
        "Name": {
          "description": "The order name.",
          "type": "string"
        },
        "CustomerId": {
          "format": "uuid",
          "description": "The customer the order belongs to.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "Market": {
          "description": "The market in which the order is valid.",
          "type": "string"
        },
        "Currency": {
          "description": "The currency of the market in which the order is valid.",
          "type": "string"
        },
        "Shipments": {
          "description": "The shipments.",
          "type": "array",
          "items": { "$ref": "#/definitions/ShipmentModel" }
        },
        "CouponCodes": {
          "description": "The coupon codes.",
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "PricingApiModel": {
      "description": "Represents pricing data for a sku",
      "type": "object",
      "properties": {
        "EntryCode": {
          "description": "The entry code.",
          "type": "string"
        },
        "Prices": {
          "description": "The prices.",
          "type": "array",
          "items": { "$ref": "#/definitions/PriceModel" }
        },
        "DiscountedPrices": {
          "description": "The discounted prices.",
          "type": "array",
          "items": { "$ref": "#/definitions/DiscountedPriceModel" }
        }
      }
    },
    "PriceModel": {
      "description": "Represents a price.",
      "type": "object",
      "properties": {
        "Price": {
          "format": "decimal",
          "description": "The price.",
          "type": "number"
        },
        "PriceType": {
          "description": "The price type.",
          "type": "string"
        },
        "PriceCode": {
          "description": "The price code.",
          "type": "string"
        },
        "ValidFrom": {
          "format": "date-time",
          "description": "The valid from date and time.",
          "type": "string"
        },
        "ValidUntil": {
          "format": "date-time",
          "description": "The valid until date and time.",
          "type": "string"
        },
        "MinQuantity": {
          "format": "decimal",
          "description": "The minimum quantity.",
          "type": "number"
        }
      }
    },
    "DiscountedPriceModel": {
      "description": "Represents a discounted price.",
      "type": "object",
      "properties": {
        "Description": {
          "description": "The description of the discount.",
          "type": "string"
        },
        "DiscountedPrice": {
          "format": "decimal",
          "description": "The discounted price.",
          "type": "number"
        },
        "DefaultPrice": {
          "format": "decimal",
          "description": "The default price that be used for calculating the discounted price.",
          "type": "number"
        }
      }
    },
    "SiteDefinitionModel": {
      "type": "object",
      "properties": {
        "Name": { "type": "string" },
        "Id": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "EditLocation": { "type": "string" },
        "ContentRoots": {
          "type": "object",
          "additionalProperties": { "$ref": "#/definitions/ContentModelReference" },
          "epi-remove": true
        },
        "Languages": {
          "type": "array",
          "items": { "$ref": "#/definitions/SiteDefinitionLanguageModel" }
        },
        "Hosts": {
          "type": "array",
          "items": { "$ref": "#/definitions/HostDefinitionModel" }
        }
      }
    },
    "SiteDefinitionLanguageModel": {
      "type": "object",
      "properties": {
        "IsMasterLanguage": { "type": "boolean" },
        "UrlSegment": { "type": "string" },
        "Url": { "type": "string" },
        "DisplayName": { "type": "string" },
        "Name": { "type": "string" }
      }
    },
    "HostDefinitionModel": {
      "type": "object",
      "properties": {
        "Name": { "type": "string" },
        "Type": { "type": "string" },
        "Language": { "$ref": "#/definitions/LanguageModel" }
      }
    },
    "WarehouseApiModel": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Gets or sets the warehouse name.",
          "type": "string"
        },
        "Modified": {
          "format": "date-time",
          "description": "Gets or sets the timestamp at which the warehouse record was most recently updated.",
          "type": "string"
        },
        "Code": {
          "description": "Gets or sets the code value.",
          "type": "string"
        },
        "ContactInformation": {
          "$ref": "#/definitions/WarehouseContactInformationModel",
          "description": "Gets or sets the contact information for the warehouse."
        },
        "IsFulfillmentCenter": {
          "description": "Indicates whether the warehouse is a fulfillment center. This means orders can be placed from this warehouse for outgoing shipments.",
          "type": "boolean"
        },
        "IsPickupLocation": {
          "description": "Indicates whether the warehouse is a pick-up location. This means orders can be placed from this warehouse for in-store pickups.",
          "type": "boolean"
        },
        "IsDeliveryLocation": {
          "description": "Indicates whether the warehouse is a delivery location. This means this warehouse can be used as a delivery location (i.e. for future in-store pickups).",
          "type": "boolean"
        }
      }
    },
    "WarehouseContactInformationModel": {
      "type": "object",
      "properties": {
        "FirstName": {
          "description": "Gets or sets the contacts first name.",
          "type": "string"
        },
        "LastName": {
          "description": "Gets or sets the contacts last name.",
          "type": "string"
        },
        "Organization": {
          "description": "Gets or sets the contacts organization name.",
          "type": "string"
        },
        "Line1": {
          "description": "Gets or sets the primary line of the contacts physical address.",
          "type": "string"
        },
        "Line2": {
          "description": "Gets or sets the secondary line of the contacts physical address.",
          "type": "string"
        },
        "City": {
          "description": "Gets or sets the city of the contacts physical address.",
          "type": "string"
        },
        "State": {
          "description": "Gets or sets the state of the contacts physical address.",
          "type": "string"
        },
        "CountryCode": {
          "description": "Gets or sets the country code of the contacts physical address.",
          "type": "string"
        },
        "CountryName": {
          "description": "Gets or sets the country of the contacts physical address.",
          "type": "string"
        },
        "PostalCode": {
          "description": "Gets or sets the postal code of the contacts physical address.",
          "type": "string"
        },
        "RegionCode": {
          "description": "Gets or sets the region code of the contacts physical address.",
          "type": "string"
        },
        "RegionName": {
          "description": "Gets or sets the region name of the contacts physical address.",
          "type": "string"
        },
        "DaytimePhoneNumber": {
          "description": "Gets or sets the phone number at which the contact can be reached during regular work hours.",
          "type": "string"
        },
        "EveningPhoneNumber": {
          "description": "Gets or sets the phone number at which the contact can be reached outside of regular work hours.",
          "type": "string"
        },
        "FaxNumber": {
          "description": "Gets or sets the phone number at which the contact can be reached by fax.",
          "type": "string"
        },
        "Email": {
          "description": "Gets or sets the contacts email address.",
          "type": "string"
        }
      }
    }
  }
}